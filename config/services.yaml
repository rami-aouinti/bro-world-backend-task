# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    locale: 'en'
    app.notifications.email_sender: admin@localhost
    api_media_base_url: '%env(API_MEDIA_BASE_URL)%'
    .container.dumper.inline_factories: true
    debug.container.dump: false
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $projectDir: '%kernel.project_dir%'
            $environment: '%kernel.environment%'
            $locale: '%locale%'
            $databaseHealthHistoryDays: '%env(int:DATABASE_HEALTH_HISTORY_DAYS)%'
            $databaseLogLoginHistoryDays: '%env(int:DATABASE_LOG_LOGIN_HISTORY_DAYS)%'
            $databaseLogRequestHistoryDays: '%env(int:DATABASE_LOG_REQUEST_HISTORY_DAYS)%'
            $messengerMessagesHistoryDays: '%env(int:MESSENGER_MESSAGES_HISTORY_DAYS)%'
            $elasticNumberOfShards: '%env(int:ELASTICSEARCH_NUMBER_OF_SHARDS)%'
            $elasticNumberOfReplicas: '%env(int:ELASTICSEARCH_NUMBER_OF_REPLICAS)%'
            $lockUserOnLoginFailureAttempts: '%env(int:LOCK_USER_ON_LOGIN_FAILURE_ATTEMPTS)%'
    _instanceof:
        App\General\Application\Rest\Interfaces\RestResourceInterface:
            tags: [ 'app.rest.resource', 'app.stopwatch' ]
        App\General\Application\Rest\Interfaces\RestSmallResourceInterface:
            tags: [ 'app.rest.resource', 'app.stopwatch' ]
        App\General\Application\Rest\Interfaces\BaseRestResourceInterface:
            calls:
                - setValidator: ['@validator']
        AutoMapperPlus\MapperInterface:
            tags: [ 'app.stopwatch' ]
        Symfony\Component\EventDispatcher\EventSubscriberInterface:
            tags: [ 'app.stopwatch' ]
        Symfony\Component\HttpKernel\Controller\ValueResolverInterface:
            tags: [ 'app.stopwatch' ]
        App\General\Application\Utils\Interfaces\MailSenderInterface:
            calls:
                - setMailerService: [ '@App\General\Domain\Service\Interfaces\MailerServiceInterface', '%env(resolve:APP_SENDER_EMAIL)%', '%env(resolve:APP_ERROR_RECEIVER_EMAIL)%', '%env(int:APP_EMAIL_NOTIFICATION_ABOUT_ERROR)%']
                - setTwig: ['@twig']
        App\General\Application\Bus\Command\CommandHandlerInterface:
            tags:
                - { name: messenger.message_handler, bus: command_bus }
        App\General\Application\Bus\Query\QueryHandlerInterface:
            tags:
                - { name: messenger.message_handler, bus: query.bus }
        App\General\Application\Bus\Event\DomainEventSubscriberInterface:
            tags:
                - { name: messenger.message_handler, bus: domainEvent.bus }
        App\General\Application\Bus\Event\IntegrationEventSubscriberInterface:
            tags:
                - { name: messenger.message_handler, bus: integrationEvent.bus }
        App\General\Domain\Event\DomainEventInterface:
            tags: [ 'task_manager.domain_event' ]
        App\Projections\Domain\Service\Projector\ProjectorInterface:
            tags: [ 'task_manager.projector' ]
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/*/Domain/Entity/'
            - '../src/*/Transport/EventListener/'
            - '../src/Kernel.php'
            - '../src/*/Application/Command/*'
            - '../src/*/Application/Query/*'
            - '../src/*/Domain/Collection/*'
            - '../src/*/Domain/DTO/*'
            - '../src/*/Domain/Entity/*'
            - '../src/*/Domain/Exception/*'
            - '../src/*/Domain/ValueObject/*'
    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\General\Transport\ValueResolver\EntityValueResolver:
        tags:
            - { name: controller.argument_value_resolver, priority: 150 }

    App\General\Infrastructure\Messenger\Strategy\FailedRetry:
        arguments:
            $isRetryable: '%env(bool:MESSENGER_FAILED_IS_RETRYABLE)%'
            $retryWaitingTime: '%env(int:MESSENGER_FAILED_RETRY_WAITING_TIME)%'

    App\General\Infrastructure\Service\LexikJwtAuthenticatorService:
        arguments:
            $path: '^/api/(?!.*(security)|(test)|(doc)).*$'

    App\General\Domain\Service\Interfaces\ElasticsearchServiceInterface:
        class: App\General\Infrastructure\Service\ElasticsearchService
        arguments:
            $host: '%env(ELASTICSEARCH_HOST)%'
            $username: '%env(ELASTICSEARCH_USERNAME)%'
            $password: '%env(ELASTICSEARCH_PASSWORD)%'
        #lazy: true

    app.serializer.normalizer.object.external_message:
        class: Symfony\Component\Serializer\Normalizer\ObjectNormalizer
        autoconfigure: false
        arguments:
            $nameConverter: '@serializer.name_converter.camel_case_to_snake_case'

    app.serializer.denormalizer.array.external_message:
        class: Symfony\Component\Serializer\Normalizer\ArrayDenormalizer
        autoconfigure: false

    app.serializer.normalizer.date_time.external_message:
        class: Symfony\Component\Serializer\Normalizer\DateTimeNormalizer
        autoconfigure: false
        arguments:
            - { datetime_format: 'Y-m-d H:i:s' }

    app.serializer.encoder.json.external_message:
        class: Symfony\Component\Serializer\Encoder\JsonEncoder
        autoconfigure: false

    app.serializer.external_message:
        class: Symfony\Component\Serializer\Serializer
        autoconfigure: false
        arguments:
            $normalizers:
                - '@app.serializer.normalizer.date_time.external_message'
                - '@app.serializer.normalizer.object.external_message'
                - '@app.serializer.denormalizer.array.external_message'
            $encoders:
                - '@app.serializer.encoder.json.external_message'
    App\General\Infrastructure\Service\ApiProxyService:
        arguments:
            $apiMediaBaseUrl: '%api_media_base_url%'

    App\General\Infrastructure\Service\DomainEventMapper:
        tags:
            - { name: task_manager.argument_loader, target_tag: task_manager.domain_event }


    App\General\Infrastructure\Service\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onException }
        arguments:
            $environment: '%env(string:APP_ENV)%'

    Ramsey\Uuid\UuidFactory: ~

    Ramsey\Uuid\UuidFactoryInterface: '@Ramsey\Uuid\UuidFactory'

    App\Projections\Domain\Service\Projector\Projectionist:
        arguments:
            - !tagged task_manager.projector

    # For development purposes only: app domains pretend to be microservices
    Symfony\Component\Messenger\Handler\HandlersLocatorInterface: '@domainEvent.bus.messenger.handlers_locator'

    App\Projections\Domain\Service\EventStore\EventStreamFactory:
        autowire: false
        # For development purposes only: app domains pretend to be microservices
        arguments:
            $streamFilter: '@App\Projections\Domain\Service\EventStore\SimulateMicroserviceEventStreamFilter'


when@dev:
    services:
        _defaults:
            autowire: true
            autoconfigure: true

        App\Tests\TestCase\:
            resource: '../tests/TestCase/*'

        App\Tests\Utils\:
            resource: '../tests/Utils/*'

        ProxyManager\Factory\AccessInterceptorValueHolderFactory:
            class: ProxyManager\Factory\AccessInterceptorValueHolderFactory

        doctrine.dbal.default_connection.stopwatch:
            class: Doctrine\DBAL\Connection
            decorates: doctrine.dbal.default_connection
            factory: [ '@App\General\Application\Decorator\StopwatchDecorator', decorate ]
            arguments: [ '@doctrine.dbal.default_connection.stopwatch.inner' ]

        symfony.component.serializer.stopwatch:
            class: Symfony\Component\Serializer\Serializer
            decorates: serializer
            factory: [ '@App\General\Application\Decorator\StopwatchDecorator', decorate ]
            arguments: [ '@symfony.component.serializer.stopwatch.inner' ]

when@test:
    services:
        _defaults:
            autowire: true
            autoconfigure: true
            public: true

        App\Tests\TestCase\:
            resource: '../tests/TestCase/*'

        App\Tests\Utils\:
            resource: '../tests/Utils/*'
